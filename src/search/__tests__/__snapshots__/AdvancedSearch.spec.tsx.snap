// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdvancedSearch shallow components should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AdvancedSearch
    clauses={
      Array [
        Object {
          "id": 0,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
        Object {
          "id": 0,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
        Object {
          "id": 0,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
        Object {
          "id": 0,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
      ]
    }
    dispatchAddClause={[MockFunction]}
    dispatchCopyQueryClausesToSearch={[MockFunction]}
    dispatchFetchSearchTermsIfNeeded={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    dispatchfetchEvidencesIfNeeded={
      [MockFunction] {
        "calls": Array [
          Array [
            "go",
          ],
          Array [
            "annotation",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    evidences={
      Object {
        "annotation": Object {
          "data": Array [],
          "isFetching": false,
        },
        "go": Object {
          "data": Array [],
          "isFetching": false,
        },
      }
    }
    handleAdvancedSubmitClick={[MockFunction]}
    history={
      Object {
        "push": [MockFunction],
      }
    }
    namespace="UniProtKB"
    searchTerms={
      Object {
        "data": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div>
          <label
            htmlFor="namespace-select"
          >
            Searching in
            <select
              id="namespace-select"
            >
              <option>
                UniProtKB
              </option>
            </select>
          </label>
        </div>,
        <ClauseList
          clauses={
            Array [
              Object {
                "id": 0,
                "logicOperator": "AND",
                "queryInput": Object {},
                "searchTerm": Object {
                  "dataType": "string",
                  "example": "a4_human, P05067, cdc7 human",
                  "id": "id_all",
                  "itemType": "single",
                  "label": "All",
                  "term": "All",
                },
              },
              Object {
                "id": 0,
                "logicOperator": "AND",
                "queryInput": Object {},
                "searchTerm": Object {
                  "dataType": "string",
                  "example": "a4_human, P05067, cdc7 human",
                  "id": "id_all",
                  "itemType": "single",
                  "label": "All",
                  "term": "All",
                },
              },
              Object {
                "id": 0,
                "logicOperator": "AND",
                "queryInput": Object {},
                "searchTerm": Object {
                  "dataType": "string",
                  "example": "a4_human, P05067, cdc7 human",
                  "id": "id_all",
                  "itemType": "single",
                  "label": "All",
                  "term": "All",
                },
              },
              Object {
                "id": 0,
                "logicOperator": "AND",
                "queryInput": Object {},
                "searchTerm": Object {
                  "dataType": "string",
                  "example": "a4_human, P05067, cdc7 human",
                  "id": "id_all",
                  "itemType": "single",
                  "label": "All",
                  "term": "All",
                },
              },
            ]
          }
          dispatchAddClause={[MockFunction]}
          dispatchCopyQueryClausesToSearch={[MockFunction]}
          dispatchFetchSearchTermsIfNeeded={
            [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          dispatchfetchEvidencesIfNeeded={
            [MockFunction] {
              "calls": Array [
                Array [
                  "go",
                ],
                Array [
                  "annotation",
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          evidences={
            Object {
              "annotation": Object {
                "data": Array [],
                "isFetching": false,
              },
              "go": Object {
                "data": Array [],
                "isFetching": false,
              },
            }
          }
          handleAdvancedSubmitClick={[MockFunction]}
          history={
            Object {
              "push": [MockFunction],
            }
          }
          namespace="UniProtKB"
          searchTerms={
            Object {
              "data": Array [],
            }
          }
        />,
        <button
          id="add-field"
          onClick={[MockFunction]}
          type="button"
        >
          Add Field
        </button>,
        <div>
          <button
            className="button"
            id="submit-query"
            onClick={[MockFunction]}
            type="button"
          >
            Search
          </button>
        </div>,
      ],
      "className": "advanced-search",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <label
            htmlFor="namespace-select"
          >
            Searching in
            <select
              id="namespace-select"
            >
              <option>
                UniProtKB
              </option>
            </select>
          </label>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Searching in",
              <select
                id="namespace-select"
              >
                <option>
                  UniProtKB
                </option>
              </select>,
            ],
            "htmlFor": "namespace-select",
          },
          "ref": null,
          "rendered": Array [
            "Searching in",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <option>
                  UniProtKB
                </option>,
                "id": "namespace-select",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "UniProtKB",
                },
                "ref": null,
                "rendered": "UniProtKB",
                "type": "option",
              },
              "type": "select",
            },
          ],
          "type": "label",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "clauses": Array [
            Object {
              "id": 0,
              "logicOperator": "AND",
              "queryInput": Object {},
              "searchTerm": Object {
                "dataType": "string",
                "example": "a4_human, P05067, cdc7 human",
                "id": "id_all",
                "itemType": "single",
                "label": "All",
                "term": "All",
              },
            },
            Object {
              "id": 0,
              "logicOperator": "AND",
              "queryInput": Object {},
              "searchTerm": Object {
                "dataType": "string",
                "example": "a4_human, P05067, cdc7 human",
                "id": "id_all",
                "itemType": "single",
                "label": "All",
                "term": "All",
              },
            },
            Object {
              "id": 0,
              "logicOperator": "AND",
              "queryInput": Object {},
              "searchTerm": Object {
                "dataType": "string",
                "example": "a4_human, P05067, cdc7 human",
                "id": "id_all",
                "itemType": "single",
                "label": "All",
                "term": "All",
              },
            },
            Object {
              "id": 0,
              "logicOperator": "AND",
              "queryInput": Object {},
              "searchTerm": Object {
                "dataType": "string",
                "example": "a4_human, P05067, cdc7 human",
                "id": "id_all",
                "itemType": "single",
                "label": "All",
                "term": "All",
              },
            },
          ],
          "dispatchAddClause": [MockFunction],
          "dispatchCopyQueryClausesToSearch": [MockFunction],
          "dispatchFetchSearchTermsIfNeeded": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": undefined,
              },
            ],
          },
          "dispatchfetchEvidencesIfNeeded": [MockFunction] {
            "calls": Array [
              Array [
                "go",
              ],
              Array [
                "annotation",
              ],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": undefined,
              },
              Object {
                "isThrow": false,
                "value": undefined,
              },
            ],
          },
          "evidences": Object {
            "annotation": Object {
              "data": Array [],
              "isFetching": false,
            },
            "go": Object {
              "data": Array [],
              "isFetching": false,
            },
          },
          "handleAdvancedSubmitClick": [MockFunction],
          "history": Object {
            "push": [MockFunction],
          },
          "namespace": "UniProtKB",
          "searchTerms": Object {
            "data": Array [],
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Add Field",
          "id": "add-field",
          "onClick": [MockFunction],
          "type": "button",
        },
        "ref": null,
        "rendered": "Add Field",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <button
            className="button"
            id="submit-query"
            onClick={[MockFunction]}
            type="button"
          >
            Search
          </button>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Search",
            "className": "button",
            "id": "submit-query",
            "onClick": [MockFunction],
            "type": "button",
          },
          "ref": null,
          "rendered": "Search",
          "type": "button",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div>
            <label
              htmlFor="namespace-select"
            >
              Searching in
              <select
                id="namespace-select"
              >
                <option>
                  UniProtKB
                </option>
              </select>
            </label>
          </div>,
          <ClauseList
            clauses={
              Array [
                Object {
                  "id": 0,
                  "logicOperator": "AND",
                  "queryInput": Object {},
                  "searchTerm": Object {
                    "dataType": "string",
                    "example": "a4_human, P05067, cdc7 human",
                    "id": "id_all",
                    "itemType": "single",
                    "label": "All",
                    "term": "All",
                  },
                },
                Object {
                  "id": 0,
                  "logicOperator": "AND",
                  "queryInput": Object {},
                  "searchTerm": Object {
                    "dataType": "string",
                    "example": "a4_human, P05067, cdc7 human",
                    "id": "id_all",
                    "itemType": "single",
                    "label": "All",
                    "term": "All",
                  },
                },
                Object {
                  "id": 0,
                  "logicOperator": "AND",
                  "queryInput": Object {},
                  "searchTerm": Object {
                    "dataType": "string",
                    "example": "a4_human, P05067, cdc7 human",
                    "id": "id_all",
                    "itemType": "single",
                    "label": "All",
                    "term": "All",
                  },
                },
                Object {
                  "id": 0,
                  "logicOperator": "AND",
                  "queryInput": Object {},
                  "searchTerm": Object {
                    "dataType": "string",
                    "example": "a4_human, P05067, cdc7 human",
                    "id": "id_all",
                    "itemType": "single",
                    "label": "All",
                    "term": "All",
                  },
                },
              ]
            }
            dispatchAddClause={[MockFunction]}
            dispatchCopyQueryClausesToSearch={[MockFunction]}
            dispatchFetchSearchTermsIfNeeded={
              [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
            dispatchfetchEvidencesIfNeeded={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "go",
                  ],
                  Array [
                    "annotation",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
            evidences={
              Object {
                "annotation": Object {
                  "data": Array [],
                  "isFetching": false,
                },
                "go": Object {
                  "data": Array [],
                  "isFetching": false,
                },
              }
            }
            handleAdvancedSubmitClick={[MockFunction]}
            history={
              Object {
                "push": [MockFunction],
              }
            }
            namespace="UniProtKB"
            searchTerms={
              Object {
                "data": Array [],
              }
            }
          />,
          <button
            id="add-field"
            onClick={[MockFunction]}
            type="button"
          >
            Add Field
          </button>,
          <div>
            <button
              className="button"
              id="submit-query"
              onClick={[MockFunction]}
              type="button"
            >
              Search
            </button>
          </div>,
        ],
        "className": "advanced-search",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <label
              htmlFor="namespace-select"
            >
              Searching in
              <select
                id="namespace-select"
              >
                <option>
                  UniProtKB
                </option>
              </select>
            </label>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Searching in",
                <select
                  id="namespace-select"
                >
                  <option>
                    UniProtKB
                  </option>
                </select>,
              ],
              "htmlFor": "namespace-select",
            },
            "ref": null,
            "rendered": Array [
              "Searching in",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <option>
                    UniProtKB
                  </option>,
                  "id": "namespace-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "UniProtKB",
                  },
                  "ref": null,
                  "rendered": "UniProtKB",
                  "type": "option",
                },
                "type": "select",
              },
            ],
            "type": "label",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "clauses": Array [
              Object {
                "id": 0,
                "logicOperator": "AND",
                "queryInput": Object {},
                "searchTerm": Object {
                  "dataType": "string",
                  "example": "a4_human, P05067, cdc7 human",
                  "id": "id_all",
                  "itemType": "single",
                  "label": "All",
                  "term": "All",
                },
              },
              Object {
                "id": 0,
                "logicOperator": "AND",
                "queryInput": Object {},
                "searchTerm": Object {
                  "dataType": "string",
                  "example": "a4_human, P05067, cdc7 human",
                  "id": "id_all",
                  "itemType": "single",
                  "label": "All",
                  "term": "All",
                },
              },
              Object {
                "id": 0,
                "logicOperator": "AND",
                "queryInput": Object {},
                "searchTerm": Object {
                  "dataType": "string",
                  "example": "a4_human, P05067, cdc7 human",
                  "id": "id_all",
                  "itemType": "single",
                  "label": "All",
                  "term": "All",
                },
              },
              Object {
                "id": 0,
                "logicOperator": "AND",
                "queryInput": Object {},
                "searchTerm": Object {
                  "dataType": "string",
                  "example": "a4_human, P05067, cdc7 human",
                  "id": "id_all",
                  "itemType": "single",
                  "label": "All",
                  "term": "All",
                },
              },
            ],
            "dispatchAddClause": [MockFunction],
            "dispatchCopyQueryClausesToSearch": [MockFunction],
            "dispatchFetchSearchTermsIfNeeded": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
            "dispatchfetchEvidencesIfNeeded": [MockFunction] {
              "calls": Array [
                Array [
                  "go",
                ],
                Array [
                  "annotation",
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
            "evidences": Object {
              "annotation": Object {
                "data": Array [],
                "isFetching": false,
              },
              "go": Object {
                "data": Array [],
                "isFetching": false,
              },
            },
            "handleAdvancedSubmitClick": [MockFunction],
            "history": Object {
              "push": [MockFunction],
            },
            "namespace": "UniProtKB",
            "searchTerms": Object {
              "data": Array [],
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Add Field",
            "id": "add-field",
            "onClick": [MockFunction],
            "type": "button",
          },
          "ref": null,
          "rendered": "Add Field",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <button
              className="button"
              id="submit-query"
              onClick={[MockFunction]}
              type="button"
            >
              Search
            </button>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Search",
              "className": "button",
              "id": "submit-query",
              "onClick": [MockFunction],
              "type": "button",
            },
            "ref": null,
            "rendered": "Search",
            "type": "button",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
