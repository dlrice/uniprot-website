// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EvidenceField component should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EvidenceField
    data={
      Array [
        Object {
          "groupName": "foo",
          "items": Array [
            Object {
              "code": 0,
              "name": "bar",
            },
            Object {
              "code": 1,
              "name": "baz",
            },
          ],
        },
      ]
    }
    handleChange={[MockFunction]}
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <label
        htmlFor="evidence_select"
      >
        Evidence
        <select
          id="evidence_select"
          onChange={[Function]}
          value=""
        >
          <optgroup
            label="foo"
          >
            <option
              value={0}
            >
              bar
            </option>
            <option
              value={1}
            >
              baz
            </option>
          </optgroup>
        </select>
      </label>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          "Evidence",
          <select
            id="evidence_select"
            onChange={[Function]}
            value=""
          >
            <optgroup
              label="foo"
            >
              <option
                value={0}
              >
                bar
              </option>
              <option
                value={1}
              >
                baz
              </option>
            </optgroup>
          </select>,
        ],
        "htmlFor": "evidence_select",
      },
      "ref": null,
      "rendered": Array [
        "Evidence",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <optgroup
                label="foo"
              >
                <option
                  value={0}
                >
                  bar
                </option>
                <option
                  value={1}
                >
                  baz
                </option>
              </optgroup>,
            ],
            "id": "evidence_select",
            "onChange": [Function],
            "value": "",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "foo",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <option
                    value={0}
                  >
                    bar
                  </option>,
                  <option
                    value={1}
                  >
                    baz
                  </option>,
                ],
                "label": "foo",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "0",
                  "nodeType": "host",
                  "props": Object {
                    "children": "bar",
                    "value": 0,
                  },
                  "ref": null,
                  "rendered": "bar",
                  "type": "option",
                },
                Object {
                  "instance": null,
                  "key": "1",
                  "nodeType": "host",
                  "props": Object {
                    "children": "baz",
                    "value": 1,
                  },
                  "ref": null,
                  "rendered": "baz",
                  "type": "option",
                },
              ],
              "type": "optgroup",
            },
          ],
          "type": "select",
        },
      ],
      "type": "label",
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <label
          htmlFor="evidence_select"
        >
          Evidence
          <select
            id="evidence_select"
            onChange={[Function]}
            value=""
          >
            <optgroup
              label="foo"
            >
              <option
                value={0}
              >
                bar
              </option>
              <option
                value={1}
              >
                baz
              </option>
            </optgroup>
          </select>
        </label>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Evidence",
            <select
              id="evidence_select"
              onChange={[Function]}
              value=""
            >
              <optgroup
                label="foo"
              >
                <option
                  value={0}
                >
                  bar
                </option>
                <option
                  value={1}
                >
                  baz
                </option>
              </optgroup>
            </select>,
          ],
          "htmlFor": "evidence_select",
        },
        "ref": null,
        "rendered": Array [
          "Evidence",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <optgroup
                  label="foo"
                >
                  <option
                    value={0}
                  >
                    bar
                  </option>
                  <option
                    value={1}
                  >
                    baz
                  </option>
                </optgroup>,
              ],
              "id": "evidence_select",
              "onChange": [Function],
              "value": "",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "foo",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <option
                      value={0}
                    >
                      bar
                    </option>,
                    <option
                      value={1}
                    >
                      baz
                    </option>,
                  ],
                  "label": "foo",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": "0",
                    "nodeType": "host",
                    "props": Object {
                      "children": "bar",
                      "value": 0,
                    },
                    "ref": null,
                    "rendered": "bar",
                    "type": "option",
                  },
                  Object {
                    "instance": null,
                    "key": "1",
                    "nodeType": "host",
                    "props": Object {
                      "children": "baz",
                      "value": 1,
                    },
                    "ref": null,
                    "rendered": "baz",
                    "type": "option",
                  },
                ],
                "type": "optgroup",
              },
            ],
            "type": "select",
          },
        ],
        "type": "label",
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
