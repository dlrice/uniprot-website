// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Search shallow components should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Search
    clauses={
      Array [
        Object {
          "id": 1,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
        Object {
          "id": 1,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
        Object {
          "id": 1,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
        Object {
          "id": 1,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
      ]
    }
    dispatchAddClause={[MockFunction]}
    dispatchCopyQueryClausesToSearch={[MockFunction]}
    dispatchFetchSearchTerms={[MockFunction]}
    dispatchSubmitQuery={[MockFunction]}
    dispatchfetchEvidencesIfNeeded={[MockFunction]}
    evidences={
      Object {
        "annotation": Object {
          "data": Array [],
          "isFetching": false,
        },
        "go": Object {
          "data": Array [],
          "isFetching": false,
        },
      }
    }
    history={
      Object {
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    location={
      Object {
        "search": "",
      }
    }
    namespace="UniProtKB"
    searchTerms={
      Object {
        "data": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Unknown
          onChange={[Function]}
          onSubmit={[Function]}
          searchTerm=""
        />,
        <button
          className="adv-search-toggle"
          onClick={[Function]}
          type="button"
        >
          Advanced search
        </button>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "onChange": [Function],
          "onSubmit": [Function],
          "searchTerm": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Advanced search",
          "className": "adv-search-toggle",
          "onClick": [Function],
          "type": "button",
        },
        "ref": null,
        "rendered": "Advanced search",
        "type": "button",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Unknown
            onChange={[Function]}
            onSubmit={[Function]}
            searchTerm=""
          />,
          <button
            className="adv-search-toggle"
            onClick={[Function]}
            type="button"
          >
            Advanced search
          </button>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "onChange": [Function],
            "onSubmit": [Function],
            "searchTerm": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Advanced search",
            "className": "adv-search-toggle",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": "Advanced search",
          "type": "button",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
