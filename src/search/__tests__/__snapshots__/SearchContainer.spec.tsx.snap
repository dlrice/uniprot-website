// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Search shallow components should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Search
    clauses={
      Array [
        Object {
          "id": 1,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
        Object {
          "id": 1,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
        Object {
          "id": 1,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
        Object {
          "id": 1,
          "logicOperator": "AND",
          "queryInput": Object {},
          "searchTerm": Object {
            "dataType": "string",
            "example": "a4_human, P05067, cdc7 human",
            "id": "id_all",
            "itemType": "single",
            "label": "All",
            "term": "All",
          },
        },
      ]
    }
    dispatchAddClause={[MockFunction]}
    dispatchCopyQueryClausesToSearch={[MockFunction]}
    dispatchFetchSearchTerms={[MockFunction]}
    dispatchSubmitQuery={[MockFunction]}
    dispatchfetchEvidencesIfNeeded={[MockFunction]}
    evidences={
      Object {
        "annotation": Object {
          "data": Array [],
          "isFetching": false,
        },
        "go": Object {
          "data": Array [],
          "isFetching": false,
        },
      }
    }
    history={
      Object {
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    location={
      Object {
        "search": "",
      }
    }
    namespace="UniProtKB"
    searchTerms={
      Object {
        "data": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Unknown
        onChange={[Function]}
        onSubmit={[Function]}
        searchTerm=""
      />,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "onChange": [Function],
        "onSubmit": [Function],
        "searchTerm": "",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Unknown
          onChange={[Function]}
          onSubmit={[Function]}
          searchTerm=""
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "onChange": [Function],
          "onSubmit": [Function],
          "searchTerm": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
